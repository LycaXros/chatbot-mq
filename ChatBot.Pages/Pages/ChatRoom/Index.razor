@page "/chats"
@using ChatBot.Core.Entities
@using ChatBot.Core.Interfaces
@using Microsoft.AspNetCore.SignalR.Client
@using System.Security.Claims
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IAsyncDisposable
@attribute [Authorize]

<h3>Chat Board</h3>


<PageTitle>Chat Board</PageTitle>

<div id="messagesList">
    @foreach (var message in _messages)
    {
        <ChatMessageItem Message=message UserId=@_userId/>
    }
</div>

<hr>

<div class="input-group mb-3">
    <input type="text" id="messageInput" @bind="_messageInput" class="form-control" placeholder="Type your message" aria-label="Type your message" aria-describedby="basic-addon2">
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" 
                id="sendButton" type="button" @onclick="Send" 
                disabled="@(!IsConnected)">Send Message</button>
    </div>
</div>
@code {

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    [Inject]
    private IMessageService _ms { get; init; }

    private HubConnection? _hubConnection;
    private List<ChatMessage> _messages = new();
    private string _userId = "N/A";
    private string _userName = "N/A";
    private string? _messageInput;

    protected override async Task OnInitializedAsync()
    {
        var user = (await authenticationStateTask).User?.Identity;
        if (user is not null && user.IsAuthenticated)
        {

            var claimsIdentity = user as ClaimsIdentity;
            _userId = claimsIdentity?.Claims.FirstOrDefault(f => f.Type == ClaimTypes.NameIdentifier)?.Value ?? "N/A";
            _userName = claimsIdentity?.Claims.FirstOrDefault(f => f.Type == ClaimTypes.Name)?.Value ?? "N/A"; ;
        }

        _hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<ChatMessage>("receive", (message) =>
        {
            _messages.Add(message);
            if (_messages.Count > 50)
            {
                _messages.RemoveAt(0);
            }
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();


        var data = await _ms.GetLastMessages();
        if (data.Count > 0)
        {
            _messages = data
                .OrderBy(o => o.SentAt)
                .Select(x => new ChatMessage(x.SentAt, x.Text, x.Sender.DisplayName, x.Sender.Id)).ToList();
            
        }
    }

    private async Task Send()
    {
        if (_hubConnection is not null && !string.IsNullOrEmpty(_messageInput))
        {
            var msg = new ChatMessage(DateTimeOffset.Now, _messageInput, _userName, _userId);
            await _hubConnection.SendAsync("SendAll", msg);
            _messageInput = string.Empty;
          
        }
    }

    public bool IsConnected =>
        _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(!firstRender)
        {
            await JsRuntime.InvokeVoidAsync("ChatFunctions.ScrollToLast");
        }


        await base.OnAfterRenderAsync(firstRender);
    }
    

}